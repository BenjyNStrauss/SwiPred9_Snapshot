package modules.descriptor.vkbat.dsc;

import assist.translation.cplusplus.CTranslator;

/**
 * 
 * @translator Benjy Strauss
 *
 */

public class GOR extends CTranslator {
	/* gor info for a-helices */
	static int ia[][] = {
		{8, 13, 18, 21, 27, 33, 42, 47, 60, 60, 50, 44, 37, 31, 24, 18, 14},
		{-25, -29, -32, -32, -28, -30, -33, -37, -38, -33, -31, -34, -44, -40, -36, -37, -41},
		{13, 14, 15, 14, 14, 15, 10, 10, -17, -17, -31, -37, -23, -19, -18, -13, -8},
		{17, 20, 21, 27, 32, 32, 37, 51, 62, 54, 29, 13, 17, 14, 9, 13, 15},
		{-3, -5, -3, -4, -4, -3, -3, -10, 0, 3, 4, 5, -8, -7, 0, -1, -6},
		{-3, -8, -12, -20, -33, -45, -64, -81, -101, -67, -40, -28, -20, -19, -15, -13, -13},
		{-9, -12, -8, -9, -13, -17, -26, -22, -19, -10, -9, -7, -4, -4, -5, -5, 0},
		{-1, -4, -6, -5, -2, 0, 0, -6, 1, 1, 3, 9, -5, -2, 6, 7, 8},
		{-10, -10, -10, -8, -9, -9, -2, 10, 24, 24, 26, 30, 36, 32, 23, 22, 22},
		{4, 5, 7, 10, 13, 19, 30, 31, 45, 44, 48, 50, 39, 34, 35, 25, 17},
		{13, 12, 15, 16, 17, 22, 32, 30, 39, 47, 52, 49, 37, 26, 27, 17, 10},
		{-2, -2, -3, -6, -11, -11, -18, -20, -36, -20, -17, -16, -6, -6, -8, -6, -4},
		{-7, -8, -12, -19, -23, -28, -33, -53, -87, -190, -140, -99, -56, -37, -32, -21, -10},
		{7, 10, 14, 16, 21, 24, 28, 35, 46, 48, 44, 31, 23, 21, 13, 12, 12},
		{-2, -2, 0, 3, 4, 10, 14, 23, 32, 33, 33, 35, 32, 25, 20, 18, 17},
		{-3, -1, -4, -7, -10, -14, -19, -15, -33, -30, -39, -41, -34, -31, -33, -30, -25},
		{-2, -3, -4, -4, -6, -13, -21, -27, -45, -47, -43, -45, -39, -35, -32, -28, -23},
		{-11, -12, -11, -14, -12, -15, -18, -25, -20, -24, -20, -18, -27, -22, -14, -9, -7},
		{-2, -6, -10, -15, -10, -5, 1, 0, 7, 0, -7, -12, -16, -13, -10, -12, -20},
		{-10, -11, -13, -13, -11, -11, -13, -16, -2, -2, -2, -3, -8, -5, -2, -6, -10},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	};

	/* gor info for b-strands  */
	static int ib[][] = {	
		{0, -5, -12, -19, -24, -32, -33, -33, -34, -29, -28, -23, -22, -25, -21, -22, -19},
		{-1, 6, -1, -5, -9, -11, 0, 18, 44, 45, 27, 18, 9, 6, 11, 2, 2},
		{0, 6, 9, 6, 2, -9, -35, -65, -77, -46, -13, 17, 26, 25, 21, 13, 8}, 
		{-12, -14, -12, -14, -22, -30, -46, -47, -46, -45, -36, -21, -14, -7, -6, -8, -7},
		{-15, -21, -26, -27, -22, -12, 17, 36, 45, 37, 19, 1, -14, -20, -23, -15, -12},
		{8, 23, 34, 39, 42, 39, 26, -19, -50, -32, 3, 24, 42, 42, 39, 31, 27},
		{-2, 9, 16, 13, 11, 11, 4, 2, 3, -4, 4, 9, 9, 7, 6, 7, 4},
		{-13, -19, -22, -19, -7, 11, 38, 62, 77, 63, 33, 4, -19, -29, -28, -21, -14},
		{18, 18, 20, 20, 14, 6, -8, -13, -26, -36, -32, -22, -15, -11, -9, -6, -6},
		{-10, -19, -27, -33, -34, -28, -8, 8, 17, 15, -5, -28, -41, -42, -38, -34, -28},
		{-21, -21, -25, -29, -23, -13, -4, 9, 7, 9, -5, -24, -30, -31, -26, -21, -10},
		{9, 14, 20, 17, 14, 6, -17, -50, -58, -23, -1, 14, 25, 25, 19, 15, 9},
		{7, 14, 16, 23, 18, -1, -27, -68, -108, -74, -23, 2, 12, 20, 23, 20, 15},
		{3, 2, -7, -6, -15, -20, -29, -30, -31, -43, -40, -27, -21, -25, -20, -11, 1},
		{-6, -7, -2, -3, -1, -1, -4, -6, -15, -26, -29, -29, -25, -25, -22, -17, -18},
		{14, 14, 15, 16, 12, 2, -10, -17, -16, -2, 15, 24, 30, 31, 28, 27, 22},
		{6, 4, 9, 13, 14, 18, 19, 27, 31, 27, 22, 20, 17, 23, 26, 24, 24},
		{-4, -11, -15, -9, 8, 32, 56, 79, 92, 77, 48, 21, -1, -5, -10, -2, -1},
		{-6, -8, -25, -27, -20, 0, 15, 39, 42, 26, 16, 5, -3, -10, -4, -4, 1},
		{-1, -8, -9, -6, -5, 5, 16, 34, 43, 32, 15, -2, -6, -4, -6, -9, -8},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	};
	
	/* gor info for coil  */
	static int ic[][] = {
		{-8, -9, -9, -8, -11, -12, -21, -26, -40, -42, -32, -29, -22, -14, -9, -4, -1},
		{23, 21, 28, 31, 30, 33, 29, 19, -1, -6, 7, 17, 31, 29, 23, 30, 33},
		{-13, -18, -21, -18, -14, -8, 13, 27, 56, 42, 35, 20, 1, -1, 0, 2, 2},
		{-8, -10, -12, -16, -17, -12, -8, -22, -35, -26, -6, 2, -8, -9, -4, -7, -9},
		{13, 18, 19, 21, 18, 11, -10, -18, -36, -32, -18, -6, 16, 19, 15, 11, 13},
		{-2, -9, -15, -12, -3, 9, 33, 76, 107, 74, 31, 7, -14, -16, -17, -12, -9},
		{10, 4, -4, -2, 4, 7, 20, 18, 15, 11, 5, 0, -3, -1, 1, -1, -3},
		{10, 16, 20, 16, 7, -8, -30, -46, -70, -54, -28, -11, 17, 20, 12, 7, 2},
		{-4, -4, -5, -7, -2, 4, 7, 0, -6, -1, -5, -14, -25, -24, -16, -17, -17},
		{3, 8, 11, 11, 9, 0, -24, -37, -59, -57, -45, -32, -13, -8, -11, -3, 2},
		{2, 2, 2, 3, -2, -12, -29, -37, -44, -55, -50, -33, -17, -6, -9, -3, -2},
		{-5, -8, -12, -7, -1, 6, 27, 47, 64, 32, 16, 4, -13, -13, -7, -6, -3},
		{1, -2, -1, 0, 8, 25, 46, 82, 126, 171, 112, 73, 38, 17, 11, 4, -1},
		{-9, -11, -9, -12, -10, -10, -9, -15, -26, -21, -19, -13, -9, -4, 1, -4, -12},
		{6, 6, 1, 0, -3, -9, -11, -18, -21, -15, -14, -15, -15, -8, -5, -6, -4},
		{-7, -9, -7, -5, 1, 11, 23, 24, 38, 28, 22, 17, 8, 4, 8, 6, 6},
		{-2, -1, -2, -5, -5, -1, 5, 4, 15, 19, 20, 24, 21, 13, 9, 6, 3},
		{13, 18, 20, 18, 5, -10, -29, -46, -65, -45, -20, 2, 25, 23, 19, 9, 7},
		{6, 10, 24, 31, 22, 4, -13, -31, -40, -20, -6, 7, 16, 19, 12, 14, 17},
		{10, 15, 18, 15, 13, 7, 0, -11, -32, -23, -9, 4, 11, 7, 6, 12, 14},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	};

	/* access GOR info */
	static int[] acces(char c, int pos) {
		int ian, ibn, icn;

		int residue, seq_pos;
		int[] retVal = new int[3];

		residue = aa_no(c);
		seq_pos = pos_to_pos(pos);

		if ((residue != 999) && (seq_pos != 999)) {
			ian = ia[residue][seq_pos];
			ibn = ib[residue][seq_pos];
			icn = ic[residue][seq_pos];
		} else {
			ian = ibn = icn = 0;	 /* out of range */
		}
		
		retVal[0] = ian;
		retVal[1] = ibn;
		retVal[2] = icn;
		return retVal;
	}

	/* convert sequence position to array row */
	static int pos_to_pos(int pos1) {
		int pos2;

		switch (pos1) {	
		case -8: pos2 = 0; break;
		case -7: pos2 = 1; break;
		case -6: pos2 = 2; break;
		case -5: pos2 = 3; break;
		case -4: pos2 = 4; break;
		case -3: pos2 = 5; break;
		case -2: pos2 = 6; break;
		case -1: pos2 = 7; break;
		case  0: pos2 = 8; break;
		case  1: pos2 = 9; break;
		case  2: pos2 = 10; break;
		case  3: pos2 = 11; break;
		case  4: pos2 = 12; break;
		case  5: pos2 = 13; break;
		case  6: pos2 = 14; break;
		case  7: pos2 = 15; break;
		case  8: pos2 = 16; break;
		default: pos2 = 999;
		}

		return pos2;
	}

	/* convert residue type to array vcolumn */
	static int aa_no(char c) {
		int cno, rno;

		cno  = tolower(c);

		switch (cno) {	
		case 'a': rno = 0; break;
		case 'c': rno = 1; break;
		case 'd': rno = 2; break;
		case 'e': rno = 3; break;
		case 'f': rno = 4; break;
		case 'g': rno = 5; break;
		case 'h': rno = 6; break;
		case 'i': rno = 7; break;
		case 'k': rno = 8; break;
		case 'l': rno = 9; break;
		case 'm': rno = 10; break;
		case 'n': rno = 11; break;
		case 'p': rno = 12; break;
		case 'q': rno = 13; break;
		case 'r': rno = 14; break;
		case 's': rno = 15; break;
		case 't': rno = 16; break;
		case 'v': rno = 17; break;
		case 'w': rno = 18; break;
		case 'y': rno = 19; break;
		case 'z': rno = 20; break;
		case 'x': rno = 20; break;
		case 'b': rno = 20; break;
		case ':': rno = 20; break;
		case '.': rno = 20; break;
		default: rno = 999;
		}

		return rno;
	}
}
